#pragma once

#include "types.hpp"
#include "constants.hpp"

class Model
{
public:
	typedef states_type state_type;
	typedef states_type deriv_type;

	typedef arma::vec::fixed<outputs::outputs_size> observer_type;
	typedef arma::mat::fixed<config::buffer_headers,config::buffer_size> buffer_type;

	typedef double value_type;
	typedef double time_type;

public:

	static void rhs(
		const states_type 	&x,
		states_type 		&x_dot,
		const time_type		&t,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void observer(
		const states_type 	&x ,
		const double 		&t,
		observer_type 		&ymat,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void intermediates(
		const inputs_type	&u,
		const states_type	&x,
		mids_type			&mid,
		const time_type		&t,
		const mids_type		&last_observed_mids,
		const time_type		&last_observed_t
		);

	static double input(const time_type t,inputs_type &u)
	{
		_unused(t);
		_unused(u);

		double next_sudden_change_time=-1;
		return next_sudden_change_time;
	}

protected:

};

#include "model_mids.hpp"
#include "model_rhs.hpp"
#include "autogenerated/model_observer.hpp"
