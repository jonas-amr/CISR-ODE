#pragma once

#include "types.hpp"
#include "constants.hpp"

class Model
{
public:
	typedef states_type state_type;
	typedef states_type deriv_type;

	typedef arma::vec::fixed<outputs::outputs_size> observer_type;
	typedef arma::mat::fixed<config::buffer_headers,config::buffer_size> buffer_type;

	typedef double value_type;
	typedef double time_type;

public:

	static void rhs(
		const states_type 	&x,
		states_type 		&x_dot,
		const time_type		&t,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void observer(
		const states_type 	&x ,
		const double 		&t,
		observer_type 		&ymat,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void intermediates(
		const inputs_type	&u,
		const states_type	&x,
		mids_type			&mid,
		const time_type		&t,
		const mids_type		&last_observed_mids,
		const time_type		&last_observed_t
		);

	static double input(const time_type t,inputs_type &u)
	{
		// u0	surge_acc
		// u1	pitch_vel

		u.surge_acc()=(t>=1.0&&t<5.0?1.0:0.0);
		u.pitch_angle()=0.0;

		double next_sudden_change_time=-1;
		if(t<1.0)
			next_sudden_change_time=1.0;
		else if(t<5.0)
			next_sudden_change_time=5.0;
		return next_sudden_change_time;
	}

protected:

	static void hp_surge(const mids_type &mid,const state_type &x,state_type &x_dot)
	{
		// observable form
		const double w=platform::omega_hp_x;
		const double z=platform::zeta_hp_x;
		const int x1=x.index_surge_hp_x1;
		const int x2=x.index_surge_hp_x2;
		x_dot(x1)=-w*w*x(x2)-w*w*mid.surge_input_acc_ref();
		x_dot(x2)=x(x1)-2*z*w*x(x2)-2*z*w*mid.surge_input_acc_ref();
	}

	static double hp_surge_out(const mids_type &mid,const state_type &x)
	{
		return x.surge_hp_x2()+mid.surge_input_acc_ref();
	}

	static void lp_surge(const mids_type &mid,const state_type &x, state_type &x_dot)
	{
		// observable form
		const double w=platform::omega_lp_x;
		const double z=platform::zeta_lp_x;
		const int x1=x.index_surge_lp_x1;
		const int x2=x.index_surge_lp_x2;
		x_dot(x1)=-w*w*x(x2)+w*w*mid.surge_input_acc_ref();
		x_dot(x2)=x(x1)-2*z*w*x(x2);
	}

	static double lp_surge_out(const state_type &x)
	{
		return x.surge_lp_x2();
	}

	static void hp_pitch(const mids_type &mid,const state_type &x, state_type &x_dot)
	{
		// observable form
		const double w=platform::omega_hp_pitch;
		const int x1=x.index_pitch_hp_x1;
		x_dot(x1)=-w*x(x1)-w*mid.pitch_input_angle_ref();
	}

	static double hp_pitch_out(const mids_type &mid,const state_type &x)
	{
		return x.pitch_hp_x1()+mid.pitch_input_angle_ref();
	}
};

#include "model_mids.hpp"
#include "model_rhs.hpp"
#include "autogenerated/model_observer.hpp"
