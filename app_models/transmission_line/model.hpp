#pragma once

#include "types.hpp"
#include "constants.hpp"

class Model
{
public:
	typedef states_type state_type;
	typedef states_type deriv_type;

	typedef arma::vec::fixed<outputs::outputs_size> observer_type;
	typedef arma::mat::fixed<config::buffer_headers,config::buffer_size> buffer_type;

	typedef double value_type;
	typedef double time_type;

public:

	static void rhs(
		const states_type 	&x,
		states_type 		&x_dot,
		const time_type		&t,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void observer(
		const states_type 	&x ,
		const double 		&t,
		observer_type 		&ymat,
		const mids_type 	&last_observed_mids,
		const time_type 	&last_observed_t,
		inputs_type			&u
		);

	static void intermediates(
		const inputs_type	&u,
		const states_type	&x,
		mids_type			&mid,
		const time_type		&t,
		const mids_type		&last_observed_mids,
		const time_type		&last_observed_t
		);

	static double input(const time_type t,inputs_type &u)
	{
		u.v_in()=(t>1.0?1.0:0.0);

		double next_sudden_change_time=-1;
		return next_sudden_change_time;
	}

protected:

	const static std::size_t N=physics::N;

	static arma::mat::fixed<2*N,2*N> get_A()
	{
		const double L=physics::L;
		const double C=physics::C;
		const double R=physics::R;
		const double G=physics::G;
		const int first_0=0;
		const int N_0=N-1;

		arma::mat::fixed<2*N,2*N> A;
		A.zeros();
		long n_0;
		long n_1;

		for(n_1=1;n_1<=long(N-1);n_1++)
		{
			n_0=n_1-1;
			A(n_0,n_0)=-G/C;
			A(n_0,N+n_0)=1.0/L;
			A(n_0,N+n_0+1)=-1.0/L;
		}

		A(N_0,N_0)=-G/C;
		A(N_0,N+N_0)=1.0/L;

		A(N_0+1,first_0)=-1.0/C;
		A(N_0+1,N+first_0)=-R/L;

		for(n_1=2;n_1<=long(N);n_1++)
		{
			n_0=n_1-1;
			A(n_0+N,n_0-1)=1.0/C;
			A(n_0+N,n_0)=-1.0/C;
			A(n_0+N,N+n_0)=-R/L;
		}

		return A;
	}

};

#include "model_mids.hpp"
#include "model_rhs.hpp"
#include "autogenerated/model_observer.hpp"
